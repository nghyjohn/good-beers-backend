def dockerRegistry = "nexus-docker-technet.apps.ocp4.technet.local"
//def dockerRegistry = "docker.io/devopsprojects"
def dev = "good-beers"
def sit = "good-beers-sit"
def uat = "good-beers-uat"
def gitDiff
def changes = "Changes:\n"
build = currentBuild
changes += "In ${build.id}:\n"
for (changeLog in build.changeSets) {
    for(entry in changeLog.items) {
        for(file in entry.affectedFiles) {
            changes += "* ${file.path}\n"
        }
    }
}

def deployment(namespace,deploymentConfig,dockerRegistry,version) {
  openshift.withCluster() {
    openshift.withProject(namespace) {
      //def cm = readFile('configmap.yaml')
      //openshift.apply(cm)
      if (!openshift.selector('dc', deploymentConfig).exists()) {
        def app = openshift.newApp("--docker-image="+ dockerRegistry +"/"+ deploymentConfig +":${version}", "--insecure-registry=true")
        //openshift.set("env", "dc/"+deploymentConfig, "--from configmap/aiaagentapp-config")
        openshift.selector('svc', deploymentConfig).delete()
        dc = openshift.selector('dc', deploymentConfig)
        dc.expose("--port=8080")
        app.narrow("svc").expose("--port=8080")
      } else {
        openshift.set("triggers", "dc/"+deploymentConfig, "--remove-all")
        openshift.tag( dockerRegistry+"/"+deploymentConfig+":${version}", "${deploymentConfig}:${version}")
        //openshift.set("env", "dc/"+deploymentConfig, "--from configmap/aiaagentapp-config", "--overwrite=true")
        openshift.set("triggers", "dc/"+deploymentConfig, "--from-image=${deploymentConfig}:${version} -c ${deploymentConfig}")
        openshift.set("triggers", "dc/"+deploymentConfig, "--auto")
        
      }
      def latestDeploymentVersion = openshift.selector('dc',"${deploymentConfig}").object().status.latestVersion
      def rc = openshift.selector('rc', "${deploymentConfig}-${latestDeploymentVersion}")
      timeout (time: 10, unit: 'MINUTES') {
          rc.untilEach(1){
              def rcMap = it.object()
              return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
          }
      }

      def connected = openshift.verifyService(deploymentConfig)
      if (connected) {
        echo "Able to connect to ${deploymentConfig}"
      } else {
        echo "Unable to connect to ${deploymentConfig}"
      }
    }
  }
}

pipeline {
  agent {
        label 'mvn'
  }
  environment {
        NEXUS_URL = "technet-nexus3-technet.apps.ocp4.technet.local"
        NEXUS_REPOSITORY = "docker-private"
  }
  stages {
    stage('Build App') {
      steps {
        script {
          def pom = readMavenPom file: 'pom.xml'
          version = pom.version
          deploymentConfig = pom.name
          artifact_id = pom.artifactId
          gitDiff = sh(script: "git diff HEAD^ HEAD", returnStdout: true).trim()
        }
        sh " mvn -f pom.xml clean install -DskipTests=true"
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(dev) {
              if (!openshift.selector('bc', deploymentConfig).exists()) {
                openshift.newBuild("--name="+ imageBuildConfig, "--image-stream=redhat-openjdk18-openshift:1.4", "--binary=true", "--to="+ dockerRegistry +"/"+ deploymentConfig +":${version}", "--to-docker=true", "--push-secret=nexus-docker")
                openshift.selector("bc", imageBuildConfig).startBuild("--from-file=oc-build/deployments/ROOT.jar", "--wait")
              } else {
                def bc = openshift.selector("bc/${deploymentConfig}").object()
                bc.spec.output.to['name']="${dockerRegistry}/${deploymentConfig}:${version}"
                openshift.apply(bc)
                openshift.selector("bc", imageBuildConfig).startBuild("--from-file=oc-build/deployments/ROOT.jar", "--wait")
              }
            }
          }
        }
      }
    }
    stage('Deploy DEV') {
      steps {
        script {
          deployment('dev',deploymentConfig,dockerRegistry,version)
        }
      }
    }
    stage('Unit Test') {
      steps {
        sh "mvn -f pom.xml test"
        //sh "curl -H \"Content-Type: multipart/form-data\" -u demo:Abcd@123 -F \"file=@./target/surefire-reports/TEST-com.example.demo.DemoApplicationTests.xml\" http://13.94.39.23:8080/rest/raven/1.0/import/execution/junit?projectKey=TES"
      }
    }
    stage('Deploy SIT') {
      steps {
        script {
          deployment('sit',deploymentConfig,dockerRegistry,version)
        }
      }
    }
    stage('Promote to UAT?') {
      when {
        allOf{
          expression {
            !(env.GIT_BRANCH =~ "develop")
          }
          expression {
            !(env.GIT_BRANCH =~ "feature")
          }
        }
      }
      steps {
        timeout(time:10, unit:'MINUTES') {
        input message: "Promote to UAT?", ok: "Promote", submitter: "uat_admin-admin-edit-view"
        }
      }
    }
    stage('Deploy UAT') {
      when {
        allOf{
            expression {
                !(env.GIT_BRANCH =~ "develop")
            }
            expression {
                !(env.GIT_BRANCH =~ "feature")
            }
        }
      }
      steps {
        script {
            deployment('uat',deploymentConfig,dockerRegistry,version)
        }
      }
    }
  /*
  stage('Promote to Prod?') {
    when {
          expression {
              !(env.GIT_BRANCH =~ "develop")
          }
          expression {
              !(env.GIT_BRANCH =~ "feature")
          }
    }
    steps {
      timeout(time:10, unit:'MINUTES') {
      input message: "Promote to Prod?", ok: "Promote", submitter: "prd_admin-admin-edit-view"
      script {
        sleep 5
        sh script: "curl -s -u RS7rXnVf:vuLK4eR53KJSNBpTQ39mG31VZJMZZF9ZQonIPyr83SDv -X GET 'https://${NEXUS_URL}/service/rest/v1/search?repository=${NEXUS_REPOSITORY}&format=docker&name=${artifact_id}&version=${version}' > test.out"
        resultstring =  readFile('test.out').trim()
        jsonObj = readJSON text: resultstring
        resultstring = "${jsonObj.items.tags}"
        }
        echo "Current tags: ${resultstring}"
      }
    }
  }
  stage('Deploy Prod') {
    when {
      allOf{
          expression {
              !(env.GIT_BRANCH =~ "develop")
          }
          expression {
              !(env.GIT_BRANCH =~ "feature")
          }
      }
    }
    steps {
      script {
        openshift.withCluster() {
          openshift.withProject(prod) {
            if (openshift.selector('dc', deploymentConfig).exists()) {
              openshift.selector('dc', deploymentConfig).delete()
              openshift.selector('svc', deploymentConfig).delete()
              openshift.selector('route', deploymentConfig).delete()
            }
            // openshift.newApp(deploymentConfig +":${version}").narrow("svc").expose()
            def app = openshift.newApp("--docker-image="+ dockerRegistry +"/"+ deploymentConfig +":${version}", "--insecure-registry=true")
            app.narrow("svc").expose();
         }
        }
      }
    }
  }
  */
 }
}


